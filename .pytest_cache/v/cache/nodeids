[
  "tests/test_enduse_func.py::test_assign_lp_no_techs",
  "tests/test_enduse_func.py::test_get_peak_day",
  "tests/test_enduse_func.py::test_service_switch",
  "tests/test_enduse_func.py::test_convert_service_to_p",
  "tests/test_enduse_func.py::test_calc_lf_improvement",
  "tests/test_enduse_func.py::test_Enduse",
  "tests/test_enduse_func.py::test_get_enduse_tech",
  "tests/test_enduse_func.py::test_apply_smart_metering",
  "tests/test_enduse_func.py::test_fuel_to_service",
  "tests/test_enduse_func.py::test_service_to_fuel",
  "tests/test_enduse_func.py::test_apply_heat_recovery",
  "tests/test_enduse_func.py::test_apply_climate_chante",
  "tests/test_enduse_func.py::test_calc_fuel_tech_y",
  "tests/test_enduse_func.py::test_calc_fuel_tech_yh",
  "tests/test_enduse_func.py::test_apply_specific_change",
  "tests/test_enduse_func.py::test_get_enduse_configuration",
  "tests/test_enduse_func.py::test_apply_cooling",
  "tests/test_enduse_func.py::test_calc_service_switch",
  "tests/assumptions/test_assumptions_fuel_share.py::test_assign_by_fuel_tech_p",
  "tests/assumptions/test_base_assumptions.py::test_load_non_param_assump",
  "tests/assumptions/test_base_assumptions.py::test_load_param_assump",
  "tests/basic/test_basic_functions.py::test_get_month_from_string",
  "tests/basic/test_basic_functions.py::test_array_to_dict",
  "tests/basic/test_conversions.py::test_conversion_ktoe_gwh",
  "tests/basic/test_conversions.py::test_kwh_to_gwh",
  "tests/basic/test_conversions.py::test_ktoe_to_twh",
  "tests/basic/test_conversions.py::test_mw_to_gwhh",
  "tests/basic/test_conversions.py::test_convert_fueltypes_ktoe_GWh",
  "tests/basic/test_conversions.py::test_convert_fueltypes_sectors_ktoe_gwh",
  "tests/basic/test_date_prob.py::test_get_season",
  "tests/basic/test_date_prob.py::test_get_model_yeardays_daytype",
  "tests/basic/test_date_prob.py::test_get_month_from_yeraday",
  "tests/basic/test_date_prob.py::test_date_to_yearday",
  "tests/basic/test_date_prob.py::test_yearday_to_date",
  "tests/basic/test_date_prob.py::test_fullyear_dates",
  "tests/basic/test_date_prob.py::test_get_weekday_type",
  "tests/dwelling_stock/test_dw_stock.py::test_get_tot_pop",
  "tests/dwelling_stock/test_dw_stock.py::test_get_scenario_driver",
  "tests/dwelling_stock/test_dw_stock.py::test_dwelling",
  "tests/geography/test_weather_region.py::test_get_shape_peak_yd_factor",
  "tests/geography/test_weather_region.py::test_change_temp_climate",
  "tests/initialisations/test_helpers.py::test_init_dict_brackets",
  "tests/initialisations/test_helpers.py::test_get_nested_dict_key",
  "tests/initialisations/test_helpers.py::test_set_same_eff_all_tech",
  "tests/profiles/test_hdd_cdd.py::test_effective_temps",
  "tests/profiles/test_hdd_cdd.py::test_calc_hdd",
  "tests/profiles/test_hdd_cdd.py::test_calc_cdd",
  "tests/profiles/test_hdd_cdd.py::test_sigm_temp",
  "tests/profiles/test_hdd_cdd.py::test_get_hdd_country",
  "tests/profiles/test_hdd_cdd.py::test_get_cdd_country",
  "tests/profiles/test_hdd_cdd.py::test_calc_reg_hdd",
  "tests/profiles/test_hdd_cdd.py::test_calc_reg_cdd",
  "tests/profiles/test_load_factors.py::test_peak_shaving_max_min",
  "tests/profiles/test_load_factors.py::test_calc_lf_d",
  "tests/profiles/test_load_factors.py::test_calc_lf_y",
  "tests/profiles/test_load_factors.py::test_calc_lf_season",
  "tests/profiles/test_load_profile.py::test_calc_yh",
  "tests/profiles/test_load_profile.py::test_abs_to_rel",
  "tests/profiles/test_load_profile.py::test_calk_peak_h_dh",
  "tests/profiles/test_load_profile.py::test_LoadProfileStock",
  "tests/profiles/test_load_profile.py::test_generate_key_lu_dict",
  "tests/profiles/test_load_profile.py::test_LoadProfile",
  "tests/profiles/test_load_profile.py::test_calc_av_lp",
  "tests/scripts/test_s_disaggregation.py::test_rs_disaggregate",
  "tests/scripts/test_s_disaggregation.py::test_ss_disaggregate",
  "tests/scripts/test_s_disaggregation.py::test_is_ss_disaggregate",
  "tests/scripts/test_s_fuel_to_service.py::test_init_nested_dict_zero",
  "tests/scripts/test_s_fuel_to_service.py::test_sum_2_level_dict",
  "tests/scripts/test_s_fuel_to_service.py::test_get_s_fueltype_tech",
  "tests/scripts/test_s_generate_sigmoid.py::test_tech_sigmoid_paramters",
  "tests/scripts/test_s_generate_sigmoid.py::test_calc_sigmoid_parameters",
  "tests/scripts/test_s_generate_sigmoid.py::test_calc_sigmoid_parameters2",
  "tests/scripts/test_s_generate_sigmoid.py::test_get_tech_installed",
  "tests/scripts/test_s_generate_sigmoid.py::test_calc_service_fuel_switched",
  "tests/scripts/test_s_generate_sigmoid.py::test_tech_l_sigmoid",
  "tests/scripts/test_s_generate_sigmoid.py::test_get_sig_diffusion",
  "tests/scripts/test_s_rs_raw_shapes.py::test_assign_hes_data_to_year",
  "tests/technologies/test_diffusion_technologies.py::test_linear_diff",
  "tests/technologies/test_diffusion_technologies.py::test_sigmoid_diffusion",
  "tests/technologies/test_fuel_service_switch.py::test_get_fuel_switches_enduse",
  "tests/technologies/test_fuel_service_switch.py::test_switches_to_dict",
  "tests/technologies/test_fuel_service_switch.py::test_get_switch_criteria",
  "tests/technologies/test_fuel_service_switch.py::test_sum_fuel_across_sectors",
  "tests/technologies/test_fuel_service_switch.py::test_create_switches_from_s_shares",
  "tests/technologies/test_fuel_service_switch.py::test_autocomplete_switches",
  "tests/technologies/test_fuel_service_switch.py::test_create_service_switch",
  "tests/technologies/test_fuel_service_switch.py::test_capacity_switch",
  "tests/technologies/test_fuel_service_switch.py::test_get_share_s_tech_ey",
  "tests/technologies/test_tech_related.py::test_get_tech_type",
  "tests/technologies/test_tech_related.py::test_calc_eff_cy",
  "tests/technologies/test_tech_related.py::test_calc_hp_eff",
  "tests/technologies/test_tech_related.py::test_eff_heat_pump",
  "tests/technologies/test_tech_related.py::test_get_fueltype_str",
  "tests/technologies/test_tech_related.py::test_get_fueltype_int",
  "tests/technologies/test_tech_related.py::test_calc_av_heat_pump_eff_ey",
  "tests/technologies/test_technological_stock.py::test_Technology",
  "tests/technologies/test_technological_stock.py::test_TechStock"
]